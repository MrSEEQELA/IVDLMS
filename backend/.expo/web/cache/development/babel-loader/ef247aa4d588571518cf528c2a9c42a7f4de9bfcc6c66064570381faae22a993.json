{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _require = require(\"pg\"),\n  Pool = _require.Pool;\nvar pool = new Pool({\n  user: \"postgres\",\n  host: \"localhost\",\n  database: \"vehicles\",\n  password: \"\",\n  port: 5432\n});\nvar getVehicleInfo = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      return yield new Promise(function (resolve, reject) {\n        var sql = \"SELECT * FROM vehicle_info\";\n        pool.query(sql, function (error, results) {\n          if (error) {\n            reject(error);\n          }\n          if (results && results.rows) {\n            resolve(results.rows);\n          } else {\n            reject(new Error(\"No results found\"));\n          }\n        });\n      });\n    } catch (error_1) {\n      console.error(error_1);\n      throw new Error(\"Internal server error\");\n    }\n  });\n  return function getVehicleInfo() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar createVehicleInfo = function createVehicleInfo(body) {\n  return new Promise(function (resolve, reject) {\n    var registrationNumber = body.registrationNumber,\n      make = body.make,\n      seriesName = body.seriesName,\n      vehicleCategory = body.vehicleCategory,\n      driven = body.driven,\n      vehicleDescription = body.vehicleDescription,\n      netPowerAndEngineCapacity = body.netPowerAndEngineCapacity,\n      fuelType = body.fuelType,\n      tareAndGrossVehicleMass = body.tareAndGrossVehicleMass,\n      permissibleVMass = body.permissibleVMass,\n      drawingVMass = body.drawingVMass,\n      transmission = body.transmission,\n      colour = body.colour,\n      transpotationOf = body.transpotationOf,\n      economicSector = body.economicSector,\n      vStreetAddress = body.vStreetAddress,\n      ownership = body.ownership;\n    pool.query(\"INSERT INTO vehicle_info (registration_number, make, series_name, vehicle_category, driven, vehicle_description, net_power_and_engine_capacity, fuel_type, tare_and_gross_vehicle_mass, permissible_v_mass, drawing_v_mass, transmission, colour, transpotation_of, economic_sector, v_street_address, ownership) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17) RETURNING *\", [registrationNumber, make, seriesName, vehicleCategory, driven, vehicleDescription, netPowerAndEngineCapacity, fuelType, tareAndGrossVehicleMass, permissibleVMass, drawingVMass, transmission, colour, transpotationOf, economicSector, vStreetAddress, ownership], function (error, results) {\n      if (error) {\n        reject(error);\n      }\n      if (results && results.rows && results.rows.length > 0) {\n        resolve(`Vehicle info has been added: ${JSON.stringify(results.rows[0])}`);\n      } else {\n        reject(new Error(\"No results found\"));\n      }\n    });\n  });\n};\nvar deleteVehicleInfo = function deleteVehicleInfo(registrationNumber) {\n  return new Promise(function (resolve, reject) {\n    pool.query(\"DELETE FROM vehicle_info WHERE registration_number = $1\", [registrationNumber], function (error, results) {\n      if (error) {\n        reject(error);\n      }\n      resolve(`Vehicle info deleted with Registration Number: ${registrationNumber}`);\n    });\n  });\n};\nvar updateVehicleInfo = function updateVehicleInfo(registrationNumber, body) {\n  return new Promise(function (resolve, reject) {\n    var make = body.make,\n      seriesName = body.seriesName,\n      vehicleCategory = body.vehicleCategory,\n      driven = body.driven,\n      vehicleDescription = body.vehicleDescription,\n      netPowerAndEngineCapacity = body.netPowerAndEngineCapacity,\n      fuelType = body.fuelType,\n      tareAndGrossVehicleMass = body.tareAndGrossVehicleMass,\n      permissibleVMass = body.permissibleVMass,\n      drawingVMass = body.drawingVMass,\n      transmission = body.transmission,\n      colour = body.colour,\n      transpotationOf = body.transpotationOf,\n      economicSector = body.economicSector,\n      vStreetAddress = body.vStreetAddress,\n      ownership = body.ownership;\n    pool.query(\"UPDATE vehicle_info SET make = $1, series_name = $2, vehicle_category = $3, driven = $4, vehicle_description = $5, net_power_and_engine_capacity = $6, fuel_type = $7, tare_and_gross_vehicle_mass = $8, permissible_v_mass = $9, drawing_v_mass = $10, transmission = $11, colour = $12, transpotation_of = $13, economic_sector = $14, v_street_address = $15, ownership = $16 WHERE registration_number = $17 RETURNING *\", [make, seriesName, vehicleCategory, driven, vehicleDescription, netPowerAndEngineCapacity, fuelType, tareAndGrossVehicleMass, permissibleVMass, drawingVMass, transmission, colour, transpotationOf, economicSector, vStreetAddress, ownership, registrationNumber], function (error, results) {\n      if (error) {\n        reject(error);\n      }\n      if (results && results.rows) {\n        resolve(`Vehicle info updated: ${JSON.stringify(results.rows[0])}`);\n      } else {\n        reject(new Error(\"No results found\"));\n      }\n    });\n  });\n};\nmodule.exports = {\n  getVehicleInfo: getVehicleInfo,\n  createVehicleInfo: createVehicleInfo,\n  deleteVehicleInfo: deleteVehicleInfo,\n  updateVehicleInfo: updateVehicleInfo\n};","map":{"version":3,"names":["_require","require","Pool","pool","user","host","database","password","port","getVehicleInfo","_ref","_asyncToGenerator","Promise","resolve","reject","sql","query","error","results","rows","Error","error_1","console","apply","arguments","createVehicleInfo","body","registrationNumber","make","seriesName","vehicleCategory","driven","vehicleDescription","netPowerAndEngineCapacity","fuelType","tareAndGrossVehicleMass","permissibleVMass","drawingVMass","transmission","colour","transpotationOf","economicSector","vStreetAddress","ownership","length","JSON","stringify","deleteVehicleInfo","updateVehicleInfo","module","exports"],"sources":["/home/mbulelo/IVDLMS/Vehicle_Licensing/backend/vehicle_infoModel.js"],"sourcesContent":["const { Pool } = require(\"pg\");\n\nconst pool = new Pool({\n  user: \"postgres\",\n  host: \"localhost\",\n  database: \"vehicles\",\n  password: \"\",\n  port: 5432,\n});\n\n// Get vehicle info from the database\nconst getVehicleInfo = async () => {\n  try {\n    return await new Promise(function (resolve, reject) {\n      // Define the SQL query to fetch vehicle info without any conditions\n      const sql = \"SELECT * FROM vehicle_info\";\n\n      // Execute the SQL query\n      pool.query(sql, (error, results) => {\n        if (error) {\n          reject(error);\n        }\n        if (results && results.rows) {\n          resolve(results.rows);\n        } else {\n          reject(new Error(\"No results found\"));\n        }\n      });\n    });\n  } catch (error_1) {\n    console.error(error_1);\n    throw new Error(\"Internal server error\");\n  }\n};\n\n\n// Create vehicle info\nconst createVehicleInfo = (body) => {\n  return new Promise(function (resolve, reject) {\n    const {\n      registrationNumber,\n      make,\n      seriesName,\n      vehicleCategory,\n      driven,\n      vehicleDescription,\n      netPowerAndEngineCapacity,\n      fuelType,\n      tareAndGrossVehicleMass,\n      permissibleVMass,\n      drawingVMass,\n      transmission,\n      colour,\n      transpotationOf,\n      economicSector,\n      vStreetAddress,\n      ownership,\n    } = body;\n\n    pool.query(\n      \"INSERT INTO vehicle_info (registration_number, make, series_name, vehicle_category, driven, vehicle_description, net_power_and_engine_capacity, fuel_type, tare_and_gross_vehicle_mass, permissible_v_mass, drawing_v_mass, transmission, colour, transpotation_of, economic_sector, v_street_address, ownership) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17) RETURNING *\",\n      [\n        registrationNumber,\n        make,\n        seriesName,\n        vehicleCategory,\n        driven,\n        vehicleDescription,\n        netPowerAndEngineCapacity,\n        fuelType,\n        tareAndGrossVehicleMass,\n        permissibleVMass,\n        drawingVMass,\n        transmission,\n        colour,\n        transpotationOf,\n        economicSector,\n        vStreetAddress,\n        ownership,\n      ],\n      (error, results) => {\n        if (error) {\n          reject(error);\n        }\n        if (results && results.rows && results.rows.length > 0) {\n          resolve(\n            `Vehicle info has been added: ${JSON.stringify(results.rows[0])}`\n          );\n        } else {\n          reject(new Error(\"No results found\"));\n        }\n      }\n    );\n  });\n};\n\n// Delete vehicle info\nconst deleteVehicleInfo = (registrationNumber) => {\n  return new Promise(function (resolve, reject) {\n    pool.query(\n      \"DELETE FROM vehicle_info WHERE registration_number = $1\",\n      [registrationNumber],\n      (error, results) => {\n        if (error) {\n          reject(error);\n        }\n        resolve(`Vehicle info deleted with Registration Number: ${registrationNumber}`);\n      }\n    );\n  });\n};\n\n// Update vehicle info record\nconst updateVehicleInfo = (registrationNumber, body) => {\n  return new Promise(function (resolve, reject) {\n    const {\n      make,\n      seriesName,\n      vehicleCategory,\n      driven,\n      vehicleDescription,\n      netPowerAndEngineCapacity,\n      fuelType,\n      tareAndGrossVehicleMass,\n      permissibleVMass,\n      drawingVMass,\n      transmission,\n      colour,\n      transpotationOf,\n      economicSector,\n      vStreetAddress,\n      ownership,\n    } = body;\n    \n    pool.query(\n      \"UPDATE vehicle_info SET make = $1, series_name = $2, vehicle_category = $3, driven = $4, vehicle_description = $5, net_power_and_engine_capacity = $6, fuel_type = $7, tare_and_gross_vehicle_mass = $8, permissible_v_mass = $9, drawing_v_mass = $10, transmission = $11, colour = $12, transpotation_of = $13, economic_sector = $14, v_street_address = $15, ownership = $16 WHERE registration_number = $17 RETURNING *\",\n      [\n        make,\n        seriesName,\n        vehicleCategory,\n        driven,\n        vehicleDescription,\n        netPowerAndEngineCapacity,\n        fuelType,\n        tareAndGrossVehicleMass,\n        permissibleVMass,\n        drawingVMass,\n        transmission,\n        colour,\n        transpotationOf,\n        economicSector,\n        vStreetAddress,\n        ownership,\n        registrationNumber,\n      ],\n      (error, results) => {\n        if (error) {\n          reject(error);\n        }\n        if (results && results.rows) {\n          resolve(`Vehicle info updated: ${JSON.stringify(results.rows[0])}`);\n        } else {\n          reject(new Error(\"No results found\"));\n        }\n      }\n    );\n  });\n};\n\nmodule.exports = {\n  getVehicleInfo,\n  createVehicleInfo,\n  deleteVehicleInfo,\n  updateVehicleInfo,\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}