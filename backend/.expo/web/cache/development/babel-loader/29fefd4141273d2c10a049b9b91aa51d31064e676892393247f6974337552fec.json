{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar Pool = require(\"pg\").Pool;\nvar pool = new Pool({\n  user: \"postgres\",\n  host: \"localhost\",\n  database: \"vehicles\",\n  password: \"\",\n  port: 5432\n});\nvar getPersonalInfo = function () {\n  var _ref = _asyncToGenerator(function* (query) {\n    try {\n      return yield new Promise(function (resolve, reject) {\n        var sql = \"SELECT * FROM personal_info\";\n        if (query) {\n          sql += ` WHERE owner_name ILIKE '%${query}%'`;\n        }\n        pool.query(sql, function (error, results) {\n          if (error) {\n            reject(error);\n          }\n          if (results && results.rows) {\n            resolve(results.rows);\n          } else {\n            reject(new Error(\"No results found\"));\n          }\n        });\n      });\n    } catch (error_1) {\n      console.error(error_1);\n      throw new Error(\"Internal server error\");\n    }\n  });\n  return function getPersonalInfo(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar createPersonalInfo = function createPersonalInfo(body) {\n  return new Promise(function (resolve, reject) {\n    var ownerIdentificationType = body.ownerIdentificationType,\n      ownerIdentificationNumber = body.ownerIdentificationNumber,\n      ownerName = body.ownerName,\n      ownerSurname = body.ownerSurname,\n      ownerAddress = body.ownerAddress,\n      ownerContacts = body.ownerContacts,\n      ownerEmail = body.ownerEmail,\n      proxyIdentificationNumber = body.proxyIdentificationNumber,\n      representationIdentificationNumber = body.representationIdentificationNumber,\n      vehicleIdentificationNumber = body.vehicleIdentificationNumber;\n    pool.query(\"INSERT INTO personal_info (owner_identification_type, owner_identification_number, owner_name, owner_surname, owner_address, owner_contacts, owner_email, proxy_identification_number, representation_identification_number, vehicle_identification_number) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *\", [ownerIdentificationType, ownerIdentificationNumber, ownerName, ownerSurname, ownerAddress, ownerContacts, ownerEmail, proxyIdentificationNumber, representationIdentificationNumber, vehicleIdentificationNumber], function (error, results) {\n      if (error) {\n        reject(error);\n      }\n      if (results && results.rows && results.rows.length > 0) {\n        resolve(`Personal info has been added: ${JSON.stringify(results.rows[0])}`);\n      } else {\n        reject(new Error(\"No results found\"));\n      }\n    });\n  });\n};\nvar deletePersonalInfo = function deletePersonalInfo(id) {\n  return new Promise(function (resolve, reject) {\n    pool.query(\"DELETE FROM personal_info WHERE id = $1\", [id], function (error, results) {\n      if (error) {\n        reject(error);\n      }\n      resolve(`Personal info deleted with ID: ${id}`);\n    });\n  });\n};\nvar updatePersonalInfo = function updatePersonalInfo(id, body) {\n  return new Promise(function (resolve, reject) {\n    var ownerIdentificationType = body.ownerIdentificationType,\n      ownerIdentificationNumber = body.ownerIdentificationNumber,\n      ownerName = body.ownerName,\n      ownerSurname = body.ownerSurname,\n      ownerAddress = body.ownerAddress,\n      ownerContacts = body.ownerContacts,\n      ownerEmail = body.ownerEmail,\n      proxyIdentificationNumber = body.proxyIdentificationNumber,\n      representationIdentificationNumber = body.representationIdentificationNumber,\n      vehicleIdentificationNumber = body.vehicleIdentificationNumber;\n    pool.query(\"UPDATE personal_info SET owner_identification_type = $1, owner_identification_number = $2, owner_name = $3, owner_surname = $4, owner_address = $5, owner_contacts = $6, owner_email = $7, proxy_identification_number = $8, representation_identification_number = $9, vehicle_identification_number = $10 WHERE id = $11 RETURNING *\", [ownerIdentificationType, ownerIdentificationNumber, ownerName, ownerSurname, ownerAddress, ownerContacts, ownerEmail, proxyIdentificationNumber, representationIdentificationNumber, vehicleIdentificationNumber, id], function (error, results) {\n      if (error) {\n        reject(error);\n      }\n      if (results && results.rows) {\n        resolve(`Personal info updated: ${JSON.stringify(results.rows[0])}`);\n      } else {\n        reject(new Error(\"No results found\"));\n      }\n    });\n  });\n};\nmodule.exports = {\n  getPersonalInfo: getPersonalInfo,\n  createPersonalInfo: createPersonalInfo,\n  deletePersonalInfo: deletePersonalInfo,\n  updatePersonalInfo: updatePersonalInfo\n};","map":{"version":3,"names":["Pool","require","pool","user","host","database","password","port","getPersonalInfo","_ref","_asyncToGenerator","query","Promise","resolve","reject","sql","error","results","rows","Error","error_1","console","_x","apply","arguments","createPersonalInfo","body","ownerIdentificationType","ownerIdentificationNumber","ownerName","ownerSurname","ownerAddress","ownerContacts","ownerEmail","proxyIdentificationNumber","representationIdentificationNumber","vehicleIdentificationNumber","length","JSON","stringify","deletePersonalInfo","id","updatePersonalInfo","module","exports"],"sources":["/home/mbulelo/IVDLMS/Vehicle_Licensing/backend/personal_infoModel.js"],"sourcesContent":["const Pool = require(\"pg\").Pool;\nconst pool = new Pool({\n  user: \"postgres\",\n  host: \"localhost\",\n  database: \"vehicles\",\n  password: \"\",\n  port: 5432,\n});\n\n// Get personal info from the database\nconst getPersonalInfo = async (query) => {\n  try {\n    return await new Promise(function (resolve, reject) {\n      // Define the SQL query to fetch personal info\n      let sql = \"SELECT * FROM personal_info\";\n\n      // If a search query is provided, add a WHERE clause to filter results\n      if (query) {\n        sql += ` WHERE owner_name ILIKE '%${query}%'`; // Adjust column name if needed\n      }\n\n      // Execute the SQL query\n      pool.query(sql, (error, results) => {\n        if (error) {\n          reject(error);\n        }\n        if (results && results.rows) {\n          resolve(results.rows);\n        } else {\n          reject(new Error(\"No results found\"));\n        }\n      });\n    });\n  } catch (error_1) {\n    console.error(error_1);\n    throw new Error(\"Internal server error\");\n  }\n};\n\n// Create personal info\nconst createPersonalInfo = (body) => {\n  return new Promise(function (resolve, reject) {\n    const {\n      ownerIdentificationType,\n      ownerIdentificationNumber,\n      ownerName,\n      ownerSurname,\n      ownerAddress,\n      ownerContacts,\n      ownerEmail,\n      proxyIdentificationNumber,\n      representationIdentificationNumber,\n      vehicleIdentificationNumber,\n    } = body;\n\n    pool.query(\n      \"INSERT INTO personal_info (owner_identification_type, owner_identification_number, owner_name, owner_surname, owner_address, owner_contacts, owner_email, proxy_identification_number, representation_identification_number, vehicle_identification_number) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *\",\n      [\n        ownerIdentificationType,\n        ownerIdentificationNumber,\n        ownerName,\n        ownerSurname,\n        ownerAddress,\n        ownerContacts,\n        ownerEmail,\n        proxyIdentificationNumber,\n        representationIdentificationNumber,\n        vehicleIdentificationNumber,\n      ],\n      (error, results) => {\n        if (error) {\n          reject(error);\n        }\n        if (results && results.rows && results.rows.length > 0) {\n          resolve(\n            `Personal info has been added: ${JSON.stringify(results.rows[0])}`\n          );\n        } else {\n          reject(new Error(\"No results found\"));\n        }\n      }\n    );\n  });\n};\n\n// Delete personal info\nconst deletePersonalInfo = (id) => {\n  return new Promise(function (resolve, reject) {\n    pool.query(\n      \"DELETE FROM personal_info WHERE id = $1\",\n      [id],\n      (error, results) => {\n        if (error) {\n          reject(error);\n        }\n        resolve(`Personal info deleted with ID: ${id}`);\n      }\n    );\n  });\n};\n\n// Update personal info record\nconst updatePersonalInfo = (id, body) => {\n  return new Promise(function (resolve, reject) {\n    const {\n      ownerIdentificationType,\n      ownerIdentificationNumber,\n      ownerName,\n      ownerSurname,\n      ownerAddress,\n      ownerContacts,\n      ownerEmail,\n      proxyIdentificationNumber,\n      representationIdentificationNumber,\n      vehicleIdentificationNumber,\n    } = body;\n    \n    pool.query(\n      \"UPDATE personal_info SET owner_identification_type = $1, owner_identification_number = $2, owner_name = $3, owner_surname = $4, owner_address = $5, owner_contacts = $6, owner_email = $7, proxy_identification_number = $8, representation_identification_number = $9, vehicle_identification_number = $10 WHERE id = $11 RETURNING *\",\n      [\n        ownerIdentificationType,\n        ownerIdentificationNumber,\n        ownerName,\n        ownerSurname,\n        ownerAddress,\n        ownerContacts,\n        ownerEmail,\n        proxyIdentificationNumber,\n        representationIdentificationNumber,\n        vehicleIdentificationNumber,\n        id,\n      ],\n      (error, results) => {\n        if (error) {\n          reject(error);\n        }\n        if (results && results.rows) {\n          resolve(`Personal info updated: ${JSON.stringify(results.rows[0])}`);\n        } else {\n          reject(new Error(\"No results found\"));\n        }\n      }\n    );\n  });\n};\n\nmodule.exports = {\n  getPersonalInfo,\n  createPersonalInfo,\n  deletePersonalInfo,\n  updatePersonalInfo,\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}